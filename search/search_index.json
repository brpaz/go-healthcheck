{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Go Healthcheck is a Golang library to add Healthchecks to your application.</p> <p>It follows closely the RFC Healthcheck for the structure of the health check response.</p> <p>This library provides several built-in checks. Please refer to the checks documentation for more details.</p>"},{"location":"#usage","title":"Usage","text":"<p>See the Getting Started guide for instructions on how to use the library.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>To install the library, use go get:</p> <pre><code>go get github.com/brpaz/go-healthcheck/v2\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":"<p>The library provides a healthcheck service and an HTTP handler to expose the healthcheck endpoint.</p> <pre><code>package main\n\nimport (\n    \"github.com/brpaz/go-healthcheck/v2\"\n    \"github.com/brpaz/go-healthcheck/v2/checks/httpcheck\"\n    \"net/http\"\n)\n\nfunc main() {\n    hc := healthcheck.New(\n        healthcheck.WithServiceName(\"my-service\"),\n        healthcheck.WithDescription(\"My Service Healthcheck\"),\n        healthcheck.WithVersion(\"1.0.0\"),\n        healthcheck.WithReleaseID(\"sha256:abcdef1234567890\"),\n        healthcheck.WithChecks(\n            httpcheck.NewCheck(\n                httpcheck.WithName(\"http:google\"),\n                httpcheck.WithURL(\"https://www.google.com\"),\n                httpcheck.WithExpectedStatus(200)\n            ),\n        ),\n    )\n    http.Handle(\"/health\", healthcheck.HealthHandler(hc))\n    http.ListenAndServe(\":8080\", nil)\n}\n</code></pre> <p>When requesting the <code>/health</code> endpoint, you will receive a JSON response similar to:</p> <pre><code>{\n  \"status\": \"pass\",\n  \"service\": \"my-service\",\n  \"description\": \"My Service Healthcheck\",\n  \"version\": \"1.0.0\",\n  \"releaseId\": \"sha256:abcdef1234567890\",\n  \"checks\": {\n    \"http:google\": {\n      \"status\": \"pass\",\n      \"observedValue\": 5,\n      \"observedUnit\": \"ms\",\n      \"time\": \"2024-06-01T12:00:00Z\"\n    }\n  ]\n}\n</code></pre>"},{"location":"getting-started/#available-checks","title":"Available Checks","text":"<p>To check the specific checks documention, please refer to the checks documentation.</p>"},{"location":"checks/","title":"Overview","text":"<p>The library provides several built-in checks that you can use to monitor the health of your application. Each check implements the <code>Check</code> interface and can be added to the healthcheck service.</p>"},{"location":"checks/#built-in-checks","title":"Built-in Checks","text":"<p>This library provides the following built-in checks:</p> <ul> <li>HTTP Check - Checks that a specific http endpoint is reachable and returns the expected status code.</li> <li>TCP Check - Checks that a TCP connection can be established to a specific host and port.</li> <li>Disk Check - Checks that a disk has enough free space.</li> <li>Memory Check - Checks that the system has enough free memory.</li> <li>Database Check - Checks that a database is reachable.</li> <li>Redis Check - Checks that a Redis instance is reachable.</li> <li>Mock Check - A mock check that returns the status passed to it. Useful for testing.</li> </ul> <p>More checks may be added in the future. Pull requests are welcome!</p>"},{"location":"checks/#adding-your-own-check","title":"Adding your own check","text":"<p>To add your own check, the only requirement is to implement the <code>Check</code> interface, which requires a single method <code>Check(ctx context.Context) CheckResult</code>.</p> <p>Here is an example of a custom check that verifies if a specific file exists on the filesystem:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"os\"\n    \"time\"\n\n    \"github.com/brpaz/go-healthcheck/v2\"\n)\n\ntype FileExistsCheck struct {\n    Name     string\n    FilePath string\n}\n\nfunc (c *FileExistsCheck) Check(ctx context.Context) healthcheck.CheckResult {\n    start := time.Now()\n    _, err := os.Stat(c.FilePath)\n    duration := time.Since(start).Milliseconds()\n\n    if os.IsNotExist(err) {\n        return healthcheck.CheckResult{\n            Name:         c.Name,\n            Status:       \"fail\",\n            ComponentType: \"file\",\n            Time:          time.Now().UTC(),\n        }\n    } else if err != nil {\n        return healthcheck.CheckResult{\n            Name:         c.Name,\n            Status:       \"fail\",\n            ComponentType: \"file\",\n            Time:          time.Now().UTC(),\n        }\n    }\n\n    return healthcheck.CheckResult{\n        Name:         c.Name,\n        Status:       \"pass\",\n        ComponentType: \"file\",\n        Time:          time.Now().UTC(),\n    }\n}\n</code></pre> <p>Note that each check can have multiple sub checks. This is useful when you want to group related checks together. For example, a database check can have sub checks for connection, and specific queries.</p>"},{"location":"checks/database-check/","title":"DB Check","text":"<p>The DB Check provides checks to monitor the health of a SQL database connection. It can perform a simple ping to verify connectivity and monitor database connection pool metrics.</p>"},{"location":"checks/database-check/#ping-check","title":"Ping Check","text":"<p>Ping Check verifies that the database is reachable by performing a ping operation.</p>"},{"location":"checks/database-check/#configuration-options","title":"Configuration Options","text":"<p>The Ping Check can be configured using the following options:</p> <ul> <li><code>WithPingName(name string)</code>: Sets the name of the check.</li> <li><code>WithPingDB(db DatabasePinger)</code>: Sets the database connection to be used for the check.</li> <li><code>WithPingTimeout(timeout time.Duration)</code>: Sets the timeout for the ping operation (default is 5 seconds).</li> </ul>"},{"location":"checks/database-check/#example-usage","title":"Example Usage","text":"<pre><code>package main\n\nimport (\n  \"database/sql\"\n  \"net/http\"\n  \"time\"\n\n  _ \"github.com/lib/pq\" // Import the PostgreSQL driver\n\n  \"github.com/brpaz/go-healthcheck/v2/checks/dbcheck\"\n)\n\nfunc main() {\n  // Initialize the database connection\n  db, err := sql.Open(\"postgres\", \"user=youruser dbname=yourdb sslmode=disable\")\n  if err != nil {\n    panic(err)\n  }\n  defer db.Close()\n\n  // Create a new Ping Check\n  dbPingCheck := dbcheck.NewPingCheck(\n    dbcheck.WithPingName(\"postgres-ping\"),\n    dbcheck.WithPingDB(db),\n    dbcheck.WithPingTimeout(2*time.Second),\n  )\n}\n</code></pre>"},{"location":"checks/database-check/#connections-check","title":"Connections Check","text":"<p>Connections Check monitors the number of open connections in the database connection pool and compares it against defined thresholds.</p>"},{"location":"checks/database-check/#configuration-options_1","title":"Configuration Options","text":"<p>The Connections Check can be configured using the following options:</p> <ul> <li><code>WithConnectionsName(name string)</code>: Sets the name of the check.</li> <li><code>WithConnectionsDB(db DatabaseStatsProvider)</code>: Sets the database connection to be used for the check.</li> <li><code>WithConnectionsTimeout(timeout time.Duration)</code>: Sets the timeout for the check operation (default is 5 seconds).</li> <li><code>WithConnectionsWarnThreshold(threshold float64)</code>: Sets the warning threshold as a percentage (0-100) of max connections (default is 80.0).</li> <li><code>WithConnectionsFailThreshold(threshold float64)</code>: Sets the failure threshold as a percentage (0-100) of max connections (default is 100.0).</li> </ul>"},{"location":"checks/database-check/#example-usage_1","title":"Example Usage","text":"<pre><code>package main\n\nimport (\n  \"database/sql\"\n  \"net/http\"\n  \"time\"\n\n  _ \"github.com/lib/pq\" // Import the PostgreSQL driver\n\n  \"github.com/brpaz/go-healthcheck/v2/checks/dbcheck\"\n)\n\nfunc main() {\n  // Initialize the database connection\n  db, err := sql.Open(\"postgres\", \"user=youruser dbname=yourdb sslmode=disable\")\n  if err != nil {\n    panic(err)\n  }\n  defer db.Close()\n\n  // Configure connection pool\n  db.SetMaxOpenConns(100)\n  db.SetMaxIdleConns(10)\n\n  // Create a new Connections Check\n  dbConnectionsCheck := dbcheck.NewOpenConnectionsCheck(\n    dbcheck.WithOpenConnectionsName(\"postgres-connections\"),\n    dbcheck.WithOpenConnectionsDB(db),\n    dbcheck.WithOpenConnectionsWarnThreshold(80.0),\n    dbcheck.WithOpenConnectionsFailThreshold(95.0),\n  )\n}\n</code></pre>"},{"location":"checks/db-check/","title":"DB Check","text":"<p>The DB Check provides checks to monitor the health of a SQL database connection. It can perform a simple ping to verify connectivity and monitor database connection pool metrics.</p>"},{"location":"checks/db-check/#ping-check","title":"Ping Check","text":"<p>Ping Check verifies that the database is reachable by performing a ping operation.</p>"},{"location":"checks/db-check/#configuration-options","title":"Configuration Options","text":"<p>The Ping Check can be configured using the following options:</p> <ul> <li><code>WithPingName(name string)</code>: Sets the name of the check.</li> <li><code>WithPingDB(db DatabasePinger)</code>: Sets the database connection to be used for the check.</li> <li><code>WithPingTimeout(timeout time.Duration)</code>: Sets the timeout for the ping operation (default is 5 seconds).</li> </ul>"},{"location":"checks/db-check/#example-usage","title":"Example Usage","text":"<pre><code>package main\n\nimport (\n  \"database/sql\"\n  \"net/http\"\n  \"time\"\n\n  _ \"github.com/lib/pq\" // Import the PostgreSQL driver\n\n  \"github.com/brpaz/go-healthcheck/v2/checks/dbcheck\"\n)\n\nfunc main() {\n  // Initialize the database connection\n  db, err := sql.Open(\"postgres\", \"user=youruser dbname=yourdb sslmode=disable\")\n  if err != nil {\n    panic(err)\n  }\n  defer db.Close()\n\n  // Create a new Ping Check\n  dbPingCheck := dbcheck.NewPingCheck(\n    dbcheck.WithPingName(\"postgres-ping\"),\n    dbcheck.WithPingDB(db),\n    dbcheck.WithPingTimeout(2*time.Second),\n  )\n}\n</code></pre>"},{"location":"checks/db-check/#connections-check","title":"Connections Check","text":"<p>Connections Check monitors the number of open connections in the database connection pool and compares it against defined thresholds.</p>"},{"location":"checks/db-check/#configuration-options_1","title":"Configuration Options","text":"<p>The Connections Check can be configured using the following options:</p> <ul> <li><code>WithConnectionsName(name string)</code>: Sets the name of the check.</li> <li><code>WithConnectionsDB(db DatabaseStatsProvider)</code>: Sets the database connection to be used for the check.</li> <li><code>WithConnectionsTimeout(timeout time.Duration)</code>: Sets the timeout for the check operation (default is 5 seconds).</li> <li><code>WithConnectionsWarnThreshold(threshold float64)</code>: Sets the warning threshold as a percentage (0-100) of max connections (default is 80.0).</li> <li><code>WithConnectionsFailThreshold(threshold float64)</code>: Sets the failure threshold as a percentage (0-100) of max connections (default is 100.0).</li> </ul>"},{"location":"checks/db-check/#example-usage_1","title":"Example Usage","text":"<pre><code>package main\n\nimport (\n  \"database/sql\"\n  \"net/http\"\n  \"time\"\n\n  _ \"github.com/lib/pq\" // Import the PostgreSQL driver\n\n  \"github.com/brpaz/go-healthcheck/v2/checks/dbcheck\"\n)\n\nfunc main() {\n  // Initialize the database connection\n  db, err := sql.Open(\"postgres\", \"user=youruser dbname=yourdb sslmode=disable\")\n  if err != nil {\n    panic(err)\n  }\n  defer db.Close()\n\n  // Configure connection pool\n  db.SetMaxOpenConns(100)\n  db.SetMaxIdleConns(10)\n\n  // Create a new Connections Check\n  dbConnectionsCheck := dbcheck.NewOpenConnectionsCheck(\n    dbcheck.WithOpenConnectionsName(\"postgres-connections\"),\n    dbcheck.WithOpenConnectionsDB(db),\n    dbcheck.WithOpenConnectionsWarnThreshold(80.0),\n    dbcheck.WithOpenConnectionsFailThreshold(95.0),\n  )\n}\n</code></pre>"},{"location":"checks/disk-check/","title":"Disk Check","text":"<p>The Disk Check verifies that a disk has enough free space. This is useful for monitoring the availability of disk space on your system.</p>"},{"location":"checks/disk-check/#configuration","title":"Configuration","text":"<p>The Disk Check can be configured using the following options:</p> <ul> <li><code>WithName(name string)</code>: Sets the name of the check.</li> <li><code>WithPath(path string)</code>: Sets a disk path to be checked.</li> <li><code>WithFileSystemStater</code> : Sets a custom FileSystemStater to be used for retrieving disk usage information.</li> <li><code>WithWarnThreshold(threshold float64)</code>: Sets the disk usage percentage threshold to trigger a warning status. Default is 80.0 (80%).</li> <li><code>WithFailThreshold(threshold float64)</code>: Sets the disk usage percentage threshold to trigger a failure status. Default is 90.0 (90%).</li> </ul>"},{"location":"checks/disk-check/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"github.com/brpaz/go-healthcheck/v2\"\n    \"github.com/brpaz/go-healthcheck/v2/checks/diskcheck\"\n)\n\nfunc main() {\n    check := diskcheck.NewCheck(\n        diskcheck.WithName(\"disk:root\"),\n        diskcheck.WithPath(\"/\"),\n        diskcheck.WithWarnThreshold(75.0),\n        diskcheck.WithFailThreshold(90.0),\n    )\n}\n</code></pre>"},{"location":"checks/http-check/","title":"HTTP Check","text":"<p>The HTTP Check verifies that a specific HTTP(S) endpoint is reachable and returns the expected status code. This is useful for monitoring the health of web services and APIs.</p>"},{"location":"checks/http-check/#configuration","title":"Configuration","text":"<p>The HTTP Check can be configured using the following options:</p> <ul> <li><code>WithName(name string)</code>: Sets the name of the check.</li> <li><code>WithURL(url string)</code>: Sets the URL of the HTTP endpoint to check.</li> <li><code>WithExpectedStatus(status []int)</code>: Sets a list of expected status codes. If the response status code is not in this list, the check will fail. By default any status code in the range 200-399 is considered healthy.</li> <li><code>WithTimeout(timeout time.Duration)</code>: Sets the timeout for the HTTP request (default is 5 seconds).</li> <li><code>WithHTTPClient(client *http.Client)</code>: Sets a custom HTTP client to be used for the request.</li> </ul>"},{"location":"checks/http-check/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"github.com/brpaz/go-healthcheck/v2\"\n    \"github.com/brpaz/go-healthcheck/v2/checks/httpcheck\"\n    \"net/http\"\n)\n\nfunc main() {\n    check := httpcheck.NewCheck(\n        httpcheck.WithName(\"http:google\"),\n        httpcheck.WithURL(\"https://www.google.com\"),\n        httpcheck.WithExpectedStatus([]int{200,201}),\n        httpcheck.WithTimeout(5 * time.Second),\n    )\n}\n</code></pre>"},{"location":"checks/memory-check/","title":"Memory Check","text":"<p>The Memory Check verifies that the system has enough free memory. This is useful for monitoring the memory usage of your application and ensuring that it does not run out of memory.</p>"},{"location":"checks/memory-check/#configuration","title":"Configuration","text":"<p>The Memory Check can be configured using the following options:</p> <ul> <li><code>WithName(name string)</code>: Sets the name of the check.</li> <li><code>WithWarnThreshold(threshold float64)</code>: Sets the RAM usage percentage threshold to trigger a warning status. Default is 80.0 (80%). Values should be between 0.0 and 100.0.</li> <li><code>WithFailThreshold(threshold float64)</code>: Sets the RAM usage percentage threshold to trigger a failure status. Default is 90.0 (90%). Values should be between 0.0 and 100.0.</li> </ul>"},{"location":"checks/memory-check/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"github.com/brpaz/go-healthcheck/v2\"\n    \"github.com/brpaz/go-healthcheck/v2/checks/memorycheck\"\n)\n\nfunc main() {\n    check := memorycheck.NewCheck(\n        memorycheck.WithName(\"memory:utilization\"),\n        memorycheck.WithWarnThreshold(70.0),\n        memorycheck.WithFailThreshold(85.0),\n    )\n}\n</code></pre>"},{"location":"checks/mock-check/","title":"Mock Check","text":"<p>The Mock Check is a simple check that returns the status passed to it. This is useful for testing and simulating different health states in your application.</p>"},{"location":"checks/mock-check/#configuration","title":"Configuration","text":"<p>The Mock Check can be configured using the following options:</p> <ul> <li><code>WithName(name string)</code>: Sets the name of the check.</li> <li><code>WithStatus(status string)</code>: Sets the status to be returned by the check. Valid values are \"pass\", \"warn\", and \"fail\". Default is \"pass\".</li> </ul>"},{"location":"checks/mock-check/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"github.com/brpaz/go-healthcheck/v2\"\n    \"github.com/brpaz/go-healthcheck/v2/checks/mockcheck\"\n)\n\nfunc main() {\n    check := mockcheck.NewCheck(\n        mockcheck.WithName(\"mock:example\"),\n        mockcheck.WithStatus(\"pass\"),\n    )\n}\n</code></pre>"},{"location":"checks/redis-check/","title":"Redis Check","text":"<p>The Redis Checks provides a way to monitor the health of a Redis server.</p>"},{"location":"checks/redis-check/#configuration-options","title":"Configuration Options","text":"<p>The Redis Check can be configured using the following options:</p> <ul> <li><code>WithName(name string)</code>: Sets the name of the check.</li> <li><code>WithClient(client *redis.Client)</code>: Sets the Redis client to be used for the check.</li> <li><code>WithTimeout(timeout time.Duration)</code>: Sets the timeout for the Redis PING command (default is 5 seconds).</li> </ul>"},{"location":"checks/redis-check/#example","title":"Example","text":"<pre><code>import (\n    \"github.com/brpaz/go-healthcheck/v2/checks/redischeck\"\n)\n\nfunc main() {\n    redisClient := redis.NewClient(&amp;redis.Options{\n        Addr:     \"localhost:6379\",\n        Password: \"\", // no password set\n        DB:       0,  // use default DB\n    })\n    check := redischeck.NewCheck(\n        redischeck.WithName(\"My Redis Check\"),\n        redischeck.WithClient(redisClient),\n        redischeck.WithTimeout(5*time.Second),\n    )\n}\n</code></pre>"},{"location":"checks/tcp-check/","title":"TCP Check","text":"<p>The TCP Check verifies that a TCP connection can be established to a specific host and port. This is useful for monitoring the availability of services that communicate over TCP, such as databases, message brokers, and other network services.</p>"},{"location":"checks/tcp-check/#configuration","title":"Configuration","text":"<p>The TCP Check can be configured using the following options:</p> <ul> <li><code>WithName(name string)</code>: Sets the name of the check.</li> <li><code>WithHost(host string)</code>: Sets the hostname or IP address of the TCP endpoint to check.</li> <li><code>WithPort(port int)</code>: Sets the port number of the TCP endpoint to check.</li> <li><code>WithNetwork(network string)</code>: Sets the network type (e.g., \"tcp\", \"tcp4\", \"tcp6\"). Default is \"tcp\".</li> <li><code>WithDiale(r(dialer *net.Dialer)</code>: Sets a custom net.Dialer to be used for the connection.</li> <li><code>WithTimeout(timeout time.Duration)</code>: Sets the timeout for the TCP connection (default is 2 seconds).</li> </ul>"},{"location":"checks/tcp-check/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"github.com/brpaz/go-healthcheck/v2\"\n    \"github.com/brpaz/go-healthcheck/v2/checks/tcpcheck\"\n)\n\nfunc main() {\n    check := tcpcheck.NewCheck(\n        tcpcheck.WithName(\"tcp:my-service\"),\n        tcpcheck.WithHost(\"localhost\"),\n        tcpcheck.WithPort(8080),\n        tcpcheck.WithTimeout(5 * time.Second),\n    )\n}\n</code></pre>"}]}